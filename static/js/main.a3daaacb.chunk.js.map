{"version":3,"sources":["components/Timer.jsx","components/CountDownInput.jsx","components/CountDown.jsx","App.jsx","serviceWorker.js","index.jsx","audio/finished.mp3"],"names":["Timer","props","startTimer","event","preventDefault","playBtnIsActive","state","setState","cancelAnimationFrame","timerId","requestAnimationFrame","timer","Date","now","prevTime","currTime","miliseconds","seconds","minutes","newMs","Number","newSec","newMins","clean","stopTimer","this","play","className","toString","padStart","type","onClick","theme","React","Component","CountDownInput","secsValue","minsValue","inpHandler","toDisable","totalSeconds","disabled","min","max","value","onChange","step","tipFormatter","mins","Math","floor","round","defaultProps","CountDown","inputHandler","newValue","key","startCountdown","isFirstPlay","clearInterval","alert","setInterval","newMin","finished","Audio","finishedSound","volume","percentTimeOff","toFixed","time","percent","format","App","toCountdown","isTimer","defaultActiveKey","TabPane","tab","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.a3daaacb.chunk.js","sourcesContent":["import React from 'react';\nimport { Icon } from 'antd';\n\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playBtnIsActive: false,\n      minutes: 0,\n      seconds: 0,\n      miliseconds: 0,\n    };\n  }\n\n  componentWillUnmount() {\n    this.clean();\n  }\n\n  startTimer = event => {\n    event.preventDefault();\n    const { playBtnIsActive } = this.state;\n    if (playBtnIsActive) {\n      this.setState({ playBtnIsActive: !playBtnIsActive });\n      cancelAnimationFrame(this.timerId);\n      return;\n    }\n    this.setState({ playBtnIsActive: !playBtnIsActive });\n    this.timerId = requestAnimationFrame(this.timer(Date.now()));\n  };\n\n  timer = prevTime => () => {\n    const currTime = Date.now();\n    const { miliseconds, seconds, minutes } = this.state;\n    let newMs = Number(miliseconds) + (currTime - prevTime);\n    let newSec = Number(seconds);\n    let newMins = Number(minutes);\n    if (newMs > 999) {\n      newMs = 0;\n      newSec += 1;\n      if (newSec === 60) {\n        newSec = 0;\n        newMins += 1;\n      }\n    }\n    this.setState(\n      {\n        miliseconds: newMs,\n        seconds: newSec,\n        minutes: newMins,\n      },\n      () => {\n        this.timerId = requestAnimationFrame(this.timer(currTime));\n      }\n    );\n  };\n\n  // convertToTimeFormat = time => {\n  //   return time < 10 ? `0${time}` : `${time}`;\n  // };\n\n  // msConvert = ms => {\n  //   if (ms > 9 && ms < 100) {\n  //     return `0${ms}`;\n  //   }\n  //   return `${ms}`;\n  // };\n\n  clean = () => {\n    this.setState({\n      playBtnIsActive: false,\n      minutes: 0,\n      seconds: 0,\n      miliseconds: 0,\n    });\n    cancelAnimationFrame(this.timerId);\n  };\n\n  stopTimer = event => {\n    event.preventDefault();\n    this.clean();\n  };\n\n  render() {\n    const { minutes, seconds, miliseconds, playBtnIsActive } = this.state;\n    const play = playBtnIsActive ? 'pause-circle' : 'play-circle';\n    return (\n      <div className=\"app__timer timer\">\n        <span className=\"timer__count\">\n          {minutes.toString().padStart(2, '0')}:{seconds.toString().padStart(2, '0')}:\n          {miliseconds.toString().padStart(3, '0')}\n        </span>\n        <div className=\"timer__btns\">\n          <button type=\"button\" className=\"timer__btn\" onClick={this.startTimer}>\n            <Icon type={play} theme=\"twoTone\" />\n          </button>\n          <button type=\"button\" className=\"timer__btn\" onClick={this.stopTimer}>\n            <Icon type=\"close-square\" theme=\"twoTone\" />\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Timer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Slider, InputNumber } from 'antd';\n\nconst CountDownInput = props => {\n  const { secsValue, minsValue, inpHandler, toDisable, totalSeconds } = props;\n\n  const toolTipConvert = value => {\n    const mins = Math.floor(value / 60);\n    const seconds = Math.round(value - mins * 60);\n    return `${mins.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n  return (\n    <div className=\"countdown__changers\">\n      <h1>Введите время:</h1>\n      <div className=\"countdown__inputs\">\n        <div>\n          Mins:\n          <InputNumber\n            disabled={!toDisable}\n            min={0}\n            max={720}\n            value={minsValue}\n            onChange={inpHandler('min')}\n            className=\"timer__input\"\n          />\n        </div>\n        <div>\n          Seconds:\n          <InputNumber\n            disabled={!toDisable}\n            min={0}\n            max={59}\n            value={secsValue}\n            onChange={inpHandler('sec')}\n            className=\"timer__input\"\n          />\n        </div>\n      </div>\n      <Slider\n        disabled={!toDisable}\n        value={totalSeconds}\n        className=\"countdown__slider\"\n        onChange={inpHandler('slider')}\n        step={15}\n        min={0}\n        max={3600}\n        tipFormatter={toolTipConvert}\n      />\n    </div>\n  );\n};\n\nCountDownInput.defaultProps = {\n  toDisable: false,\n  secsValue: 0,\n  minsValue: 0,\n  inpHandler: null,\n  totalSeconds: 0,\n};\n\nCountDownInput.propTypes = {\n  toDisable: PropTypes.bool,\n  secsValue: PropTypes.number,\n  minsValue: PropTypes.number,\n  inpHandler: PropTypes.func,\n  totalSeconds: PropTypes.number,\n};\n\nexport default CountDownInput;\n","import React from 'react';\r\nimport { Icon, Progress } from 'antd';\r\nimport CountDownInput from './CountDownInput';\r\nimport finishedSound from '../audio/finished.mp3';\r\n\r\nclass CountDown extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      minsValue: 0,\r\n      secsValue: 0,\r\n      playBtnIsActive: false,\r\n      percentTimeOff: 0,\r\n      step: 0,\r\n      isFirstPlay: true,\r\n      totalSeconds: 0,\r\n    };\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.clean();\r\n  }\r\n\r\n  inputHandler = type => value => {\r\n    const newValue = value;\r\n    if (type === 'slider') {\r\n      const mins = Math.floor(value / 60);\r\n      const seconds = value - mins * 60;\r\n      this.setState({\r\n        minsValue: mins,\r\n        secsValue: seconds,\r\n        totalSeconds: value,\r\n      });\r\n      return;\r\n    }\r\n    const key = type === 'min' ? 'minsValue' : 'secsValue';\r\n    this.setState({ [key]: newValue });\r\n  };\r\n\r\n  startCountdown = () => {\r\n    const { playBtnIsActive, isFirstPlay, minsValue, secsValue } = this.state;\r\n    if (minsValue === 0 && secsValue === 0) {\r\n      alert('Введите время');\r\n      return;\r\n    }\r\n    this.setState({ playBtnIsActive: !playBtnIsActive });\r\n    if (playBtnIsActive) {\r\n      clearInterval(this.timerId);\r\n      return;\r\n    }\r\n    if (isFirstPlay || !playBtnIsActive) {\r\n      this.setState(\r\n        {\r\n          step: 100 / (minsValue * 60 + secsValue),\r\n          isFirstPlay: false,\r\n        },\r\n        () => {\r\n          this.startTimer();\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  startTimer = () => {\r\n    this.timerId = setInterval(() => {\r\n      const { step, minsValue, secsValue } = this.state;\r\n      let newMin = minsValue;\r\n      let newSec = secsValue;\r\n      if (newMin === 0 && newSec === 0) {\r\n        const finished = new Audio(finishedSound);\r\n        finished.volume = 0.3;\r\n        finished.play();\r\n        this.clean();\r\n        return;\r\n      }\r\n      if (newSec === 0) {\r\n        newSec = 59;\r\n        newMin -= 1;\r\n      } else {\r\n        newSec -= 1;\r\n      }\r\n      this.setState(state => {\r\n        return {\r\n          minsValue: newMin,\r\n          secsValue: newSec,\r\n          percentTimeOff: Number((state.percentTimeOff + Number(step)).toFixed(2)),\r\n        };\r\n      });\r\n    }, 1000);\r\n  };\r\n\r\n  clean = () => {\r\n    this.setState({\r\n      playBtnIsActive: false,\r\n      minsValue: 0,\r\n      secsValue: 0,\r\n      isFirstPlay: true,\r\n      percentTimeOff: 0,\r\n      totalSeconds: 0,\r\n    });\r\n    clearInterval(this.timerId);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      minsValue,\r\n      playBtnIsActive,\r\n      secsValue,\r\n      percentTimeOff,\r\n      isFirstPlay,\r\n      totalSeconds,\r\n    } = this.state;\r\n    const play = playBtnIsActive ? 'pause-circle' : 'play-circle';\r\n    const time = `${minsValue.toString().padStart(2, '0')}:${secsValue\r\n      .toString()\r\n      .padStart(2, '0')}`;\r\n    return (\r\n      <div className=\"countdown timer\">\r\n        <Progress type=\"circle\" percent={percentTimeOff} format={() => time} />\r\n        <CountDownInput\r\n          minsValue={minsValue}\r\n          secsValue={secsValue}\r\n          toDisable={isFirstPlay}\r\n          totalSeconds={totalSeconds}\r\n          inpHandler={this.inputHandler}\r\n        />\r\n        <div className=\"countdown__btns\">\r\n          <button type=\"button\" className=\"timer__btn\" onClick={this.startCountdown}>\r\n            <Icon type={play} theme=\"twoTone\" />\r\n          </button>\r\n          <button type=\"button\" className=\"timer__btn\" onClick={this.clean}>\r\n            <Icon type=\"close-square\" theme=\"twoTone\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CountDown;\r\n","import React from 'react';\nimport 'normalize.css';\nimport { Tabs, Icon } from 'antd';\nimport 'antd/dist/antd.css';\nimport Timer from './components/Timer';\nimport CountDown from './components/CountDown';\nimport './styles/app.scss';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isTimer: true,\n    };\n  }\n\n  toCountdown = () => {\n    const { isTimer } = this.state;\n    this.setState({ isTimer: !isTimer });\n  };\n\n  render() {\n    const { isTimer } = this.state;\n    return (\n      <div className=\"app\">\n        <Tabs defaultActiveKey=\"1\" onChange={this.toCountdown}>\n          <Tabs.TabPane\n            className=\"app__tab\"\n            tab={\n              <span>\n                <Icon type=\"clock-circle\" />\n                Timer\n              </span>\n            }\n            key=\"1\"\n          >\n            {isTimer && <Timer />}\n          </Tabs.TabPane>\n          <Tabs.TabPane\n            className=\"app__tab\"\n            tab={\n              <span>\n                <Icon type=\"dashboard\" />\n                CountDown\n              </span>\n            }\n            key=\"2\"\n          >\n            {!isTimer && <CountDown />}\n          </Tabs.TabPane>\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/* eslint-disable */\r\n\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/finished.268d8234.mp3\";"],"sourceRoot":""}