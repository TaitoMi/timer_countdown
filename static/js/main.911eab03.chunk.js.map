{"version":3,"sources":["components/Timer.jsx","components/CountDownInput.jsx","components/CountDown.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Timer","props","startTimer","event","preventDefault","playBtnIsActive","state","setState","cancelAnimationFrame","timerId","requestAnimationFrame","timer","Date","now","prevTime","currTime","miliseconds","seconds","minutes","newMs","Number","newSec","newMins","msConvert","convertToTimeFormat","time","ms","clean","stopTimer","this","play","className","type","onClick","theme","React","Component","CountDownInput","secsValue","minsValue","inpHandler","toDisable","disabled","min","max","value","onChange","step","defaultProps","CountDown","convertToTime","inputHandler","newValue","key","startCountdown","isFirstPlay","clearInterval","setInterval","newMin","Audio","percentTimeOff","toFixed","percent","App","toCountdown","isTimer","defaultActiveKey","TabPane","tab","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.911eab03.chunk.js","sourcesContent":["import React from 'react';\nimport { Icon } from 'antd';\n\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playBtnIsActive: false,\n      minutes: '00',\n      seconds: '00',\n      miliseconds: '000',\n    };\n  }\n\n  componentWillUnmount() {\n    this.clean();\n  }\n\n  startTimer = event => {\n    event.preventDefault();\n    const { playBtnIsActive } = this.state;\n    if (playBtnIsActive) {\n      this.setState({ playBtnIsActive: !playBtnIsActive });\n      cancelAnimationFrame(this.timerId);\n      return;\n    }\n    this.setState({ playBtnIsActive: !playBtnIsActive });\n    this.timerId = requestAnimationFrame(this.timer(Date.now()));\n  };\n\n  timer = prevTime => () => {\n    const currTime = Date.now();\n    const { miliseconds, seconds, minutes } = this.state;\n    let newMs = Number(miliseconds) + (currTime - prevTime);\n    let newSec = Number(seconds);\n    let newMins = Number(minutes);\n    if (newMs > 999) {\n      newMs = 0;\n      newSec += 1;\n      if (newSec === 60) {\n        newSec = 0;\n        newMins += 1;\n      }\n    }\n    this.setState(\n      {\n        miliseconds: this.msConvert(newMs),\n        seconds: this.convertToTimeFormat(newSec),\n        minutes: this.convertToTimeFormat(newMins),\n      },\n      () => {\n        this.timerId = requestAnimationFrame(this.timer(currTime));\n      }\n    );\n  };\n\n  convertToTimeFormat = time => {\n    return time < 10 ? `0${time}` : `${time}`;\n  };\n\n  msConvert = ms => {\n    if (ms > 9 && ms < 100) {\n      return `0${ms}`;\n    }\n    return `${ms}`;\n  };\n\n  clean = () => {\n    this.setState({\n      playBtnIsActive: false,\n      minutes: '00',\n      seconds: '00',\n      miliseconds: '000',\n    });\n    cancelAnimationFrame(this.timerId);\n  };\n\n  stopTimer = event => {\n    event.preventDefault();\n    this.clean();\n  };\n\n  render() {\n    const { minutes, seconds, miliseconds, playBtnIsActive } = this.state;\n    const play = playBtnIsActive ? 'pause-circle' : 'play-circle';\n    return (\n      <div className=\"app__timer timer\">\n        <span className=\"timer__count\">\n          {minutes}:{seconds}:{miliseconds}\n        </span>\n        <div className=\"timer__btns\">\n          <button type=\"button\" className=\"timer__btn\" onClick={this.startTimer}>\n            <Icon type={play} theme=\"twoTone\" />\n          </button>\n          <button type=\"button\" className=\"timer__btn\" onClick={this.stopTimer}>\n            <Icon type=\"close-square\" theme=\"twoTone\" />\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Timer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Slider, InputNumber } from 'antd';\n\nconst CountDownInput = props => {\n  const { secsValue, minsValue, inpHandler, toDisable } = props;\n  return (\n    <div className=\"countdown__changers\">\n      <h1>Введите время:</h1>\n      <div className=\"countdown__inputs\">\n        <div>\n          Mins:\n          <InputNumber\n            disabled={!toDisable}\n            min={0}\n            max={60}\n            value={minsValue}\n            onChange={inpHandler('min')}\n          />\n        </div>\n        <div>\n          Seconds:\n          <InputNumber\n            disabled={!toDisable}\n            min={0}\n            max={60}\n            value={secsValue}\n            onChange={inpHandler('sec')}\n          />\n        </div>\n      </div>\n      <Slider\n        disabled={!toDisable}\n        value={Number(minsValue)}\n        className=\"countdown__slider\"\n        onChange={inpHandler('slider')}\n        step={15}\n        min={0}\n        max={60}\n      />\n    </div>\n  );\n};\n\nCountDownInput.defaultProps = {\n  toDisable: false,\n  secsValue: '00',\n  minsValue: '00',\n  inpHandler: null,\n};\n\nCountDownInput.propTypes = {\n  toDisable: PropTypes.bool,\n  secsValue: PropTypes.string,\n  minsValue: PropTypes.string,\n  inpHandler: PropTypes.func,\n};\n\nexport default CountDownInput;\n","import React from 'react';\nimport { Icon, Progress } from 'antd';\nimport CountDownInput from './CountDownInput';\n\nclass CountDown extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      minsValue: '00',\n      secsValue: '00',\n      playBtnIsActive: false,\n      percentTimeOff: 0,\n      step: 0,\n      isFirstPlay: true,\n    };\n  }\n\n  convertToTime = time => {\n    return Number(time) < 10 ? `0${time}` : `${time}`;\n  };\n\n  inputHandler = type => value => {\n    const newValue = this.convertToTime(value);\n    if (type === 'slider') {\n      this.setState({ minsValue: newValue });\n      return;\n    }\n    const key = type === 'min' ? 'minsValue' : 'secsValue';\n    this.setState({ [key]: newValue });\n  };\n\n  startCountdown = () => {\n    const { playBtnIsActive, isFirstPlay, minsValue, secsValue } = this.state;\n    if (playBtnIsActive) {\n      clearInterval(this.timerId);\n      this.setState({ playBtnIsActive: !playBtnIsActive });\n      return;\n    }\n    this.setState({ playBtnIsActive: !playBtnIsActive });\n    if (isFirstPlay) {\n      this.setState(\n        {\n          step: 100 / (Number(secsValue) + Number(minsValue) * 60),\n          isFirstPlay: false,\n        },\n        () => {\n          this.startTimer();\n        }\n      );\n    }\n  };\n\n  startTimer = () => {\n    this.timerId = setInterval(() => {\n      const { step, minsValue, secsValue } = this.state;\n      let newMin = Number(minsValue);\n      let newSec = Number(secsValue);\n      if (newMin === 0 && newSec === 0) {\n        const finished = new Audio(\n          'https://translate.google.com/translate_tts?ie=UTF-8&q=%D0%B4%D0%B7%D1%8B%D0%BD%D1%8C&tl=ru&total=1&idx=0&textlen=5&tk=665362.822181&client=webapp&prev=input&ttsspeed=0.24'\n        );\n        finished.play();\n        this.clean();\n        return;\n      }\n      if (newSec === 0) {\n        newSec = 59;\n        newMin -= 1;\n      } else {\n        newSec -= 1;\n      }\n      this.setState(state => {\n        return {\n          minsValue: this.convertToTime(newMin),\n          secsValue: this.convertToTime(newSec),\n          percentTimeOff: Number((state.percentTimeOff + Number(step)).toFixed(2)),\n        };\n      });\n    }, 1000);\n  };\n\n  clean = () => {\n    this.setState({\n      playBtnIsActive: false,\n      minsValue: '00',\n      secsValue: '00',\n      isFirstPlay: true,\n      percentTimeOff: 0,\n    });\n    clearInterval(this.timerId);\n  };\n\n  render() {\n    const { minsValue, playBtnIsActive, secsValue, percentTimeOff, isFirstPlay } = this.state;\n    const play = playBtnIsActive ? 'pause-circle' : 'play-circle';\n    return (\n      <div className=\"countdown timer\">\n        <span className=\"timer__count\">\n          {minsValue}:{secsValue}\n        </span>\n        <Progress type=\"circle\" percent={percentTimeOff} />\n        <CountDownInput\n          minsValue={minsValue}\n          secsValue={secsValue}\n          toDisable={isFirstPlay}\n          inpHandler={this.inputHandler}\n        />\n        <div className=\"countdown__btns\">\n          <button type=\"button\" className=\"timer__btn\" onClick={this.startCountdown}>\n            <Icon type={play} theme=\"twoTone\" />\n          </button>\n          <button type=\"button\" className=\"timer__btn\" onClick={this.clean}>\n            <Icon type=\"close-square\" theme=\"twoTone\" />\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CountDown;\n","import React from 'react';\nimport 'normalize.css';\nimport { Tabs, Icon } from 'antd';\nimport 'antd/dist/antd.css';\nimport Timer from './components/Timer';\nimport CountDown from './components/CountDown';\nimport './styles/app.scss';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isTimer: true,\n    };\n  }\n\n  toCountdown = () => {\n    const { isTimer } = this.state;\n    this.setState({ isTimer: !isTimer });\n  };\n\n  render() {\n    const { isTimer } = this.state;\n    return (\n      <div className=\"app\">\n        <Tabs defaultActiveKey=\"1\" onChange={this.toCountdown}>\n          <Tabs.TabPane\n            className=\"app__tab\"\n            tab={\n              <span>\n                <Icon type=\"clock-circle\" />\n                Timer\n              </span>\n            }\n            key=\"1\"\n          >\n            {isTimer && <Timer />}\n          </Tabs.TabPane>\n          <Tabs.TabPane\n            className=\"app__tab\"\n            tab={\n              <span>\n                <Icon type=\"dashboard\" />\n                CountDown\n              </span>\n            }\n            key=\"2\"\n          >\n            {!isTimer && <CountDown />}\n          </Tabs.TabPane>\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}